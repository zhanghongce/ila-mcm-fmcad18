Axiom load_na_or_WG_SC
    forall l1:load_na_or_WG | forall l2:LOAD (~=l1) | ( HB[l1,l2] /\ SameWg[l1,l2] ) => HB[l1.rvop.WG, l2.rvop.WG]
    
Axiom load_DV_N_WG_SC
    forall l1:load_DV_N | forall l2:LOAD (~= l1) | ( HB[l1,l2] /\ SameWg[l1,l2] ) => HB[l1.rvop.WG, l2.rvop.WG]

Axiom load_DV_N_WG_REL
    forall l1:load_DV_N | forall l2:LOAD (~= l1) | ( HB[l1.rvop.WG, l2.rvop.WG] /\ SameWg[l1,l2] ) => HBd[l1.rvop.DV, l2.rvop.DV] 

Axiom load_DV_R_WG_SC
    forall l1:load_DV_R | forall l2:LOAD (~= l1) | ( HB[l1,l2] /\ SameWg[l1,l2] ) => HB[l1.rvop.WG, l2.rvop.WG]

Axiom load_DV_R_WG_REL
    forall l1:load_DV_R | forall l2:LOAD (~= l1) | ( HB[l1.rvop.WG, l2.rvop.WG] /\ SameWg[l1,l2] ) => HB[l1.rvop.DV, l2.rvop.DV] 

Axiom store_na_or_WG_SC
    forall s1:store_na_or_WG | forall s2: STORE (~=s1) | ( HB[s2,s1] /\ SameWg[s2,s1] ) =>  HB[s2.wvop.WG , s1.wvop.WG]
    
Axiom store_DV_N_SC
    forall s1: store_DV_N | forall s2: STORE (~=s1) | ( HB[s2,s1] /\ SameWg[s2,s1] ) =>  HB[s2.wvop.WG , s1.wvop.WG]

Axiom store_DV_N_WG_DV
    forall s1: store_DV_N | forall s2: STORE (~=s1) | ( HB[s2.wvop.WG, s1.wvop.WG] /\ SameWg[ s1,s2 ] ) => HB[s2.wvop.DV, s1.wvop.DV]
    
Axiom store_DV_R_PO_WG
    forall s1: store_DV_R | forall s2: STORE (~=s1) | ( HB[s2,s1] /\ SameWg[s2,s1] ) =>  HB[s2.wvop.WG , s1.wvop.WG]

Axiom store_DV_R_WG_DV
    forall s1: store_DV_R | forall s2: STORE (~=s1) | ( HB[s2.wvop.WG, s1.wvop.WG] /\ SameWg[ s1,s2 ] ) => HB[s2.wvop.DV, s1.wvop.DV]


